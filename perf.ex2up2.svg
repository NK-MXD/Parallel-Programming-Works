<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="518.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="501" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="501" > </text>
<g id="frames">
<g >
<title>__queue_work (1 samples, 7.69%)</title><rect x="373.1" y="213" width="90.7" height="15.0" fill="rgb(208,200,43)" rx="2" ry="2" />
<text  x="376.08" y="223.5" >__queue_work</text>
</g>
<g >
<title>all (13 samples, 100%)</title><rect x="10.0" y="469" width="1180.0" height="15.0" fill="rgb(221,57,27)" rx="2" ry="2" />
<text  x="13.00" y="479.5" ></text>
</g>
<g >
<title>__const_udelay (2 samples, 15.38%)</title><rect x="191.5" y="53" width="181.6" height="15.0" fill="rgb(211,182,3)" rx="2" ry="2" />
<text  x="194.54" y="63.5" >__const_udelay</text>
</g>
<g >
<title>ctx_resched (7 samples, 53.85%)</title><rect x="554.6" y="277" width="635.4" height="15.0" fill="rgb(220,140,5)" rx="2" ry="2" />
<text  x="557.62" y="287.5" >ctx_resched</text>
</g>
<g >
<title>__perf_event_task_sched_out (2 samples, 15.38%)</title><rect x="191.5" y="197" width="181.6" height="15.0" fill="rgb(217,215,10)" rx="2" ry="2" />
<text  x="194.54" y="207.5" >__perf_event_task_sched..</text>
</g>
<g >
<title>file_tty_write.isra.0 (3 samples, 23.08%)</title><rect x="191.5" y="293" width="272.3" height="15.0" fill="rgb(205,148,34)" rx="2" ry="2" />
<text  x="194.54" y="303.5" >file_tty_write.isra.0</text>
</g>
<g >
<title>perf-exec (7 samples, 53.85%)</title><rect x="554.6" y="453" width="635.4" height="15.0" fill="rgb(249,159,22)" rx="2" ry="2" />
<text  x="557.62" y="463.5" >perf-exec</text>
</g>
<g >
<title>task_ctx_sched_out (2 samples, 15.38%)</title><rect x="191.5" y="181" width="181.6" height="15.0" fill="rgb(250,14,20)" rx="2" ry="2" />
<text  x="194.54" y="191.5" >task_ctx_sched_out</text>
</g>
<g >
<title>native_write_msr (7 samples, 53.85%)</title><rect x="554.6" y="229" width="635.4" height="15.0" fill="rgb(236,111,51)" rx="2" ry="2" />
<text  x="557.62" y="239.5" >native_write_msr</text>
</g>
<g >
<title>exec_binprm (7 samples, 53.85%)</title><rect x="554.6" y="341" width="635.4" height="15.0" fill="rgb(215,58,11)" rx="2" ry="2" />
<text  x="557.62" y="351.5" >exec_binprm</text>
</g>
<g >
<title>do_syscall_64 (3 samples, 23.08%)</title><rect x="191.5" y="389" width="272.3" height="15.0" fill="rgb(225,25,54)" rx="2" ry="2" />
<text  x="194.54" y="399.5" >do_syscall_64</text>
</g>
<g >
<title>amd_pmu_disable_event (2 samples, 15.38%)</title><rect x="191.5" y="85" width="181.6" height="15.0" fill="rgb(207,182,23)" rx="2" ry="2" />
<text  x="194.54" y="95.5" >amd_pmu_disable_event</text>
</g>
<g >
<title>delay_tsc (2 samples, 15.38%)</title><rect x="191.5" y="37" width="181.6" height="15.0" fill="rgb(247,179,2)" rx="2" ry="2" />
<text  x="194.54" y="47.5" >delay_tsc</text>
</g>
<g >
<title>__x64_sys_execve (7 samples, 53.85%)</title><rect x="554.6" y="389" width="635.4" height="15.0" fill="rgb(237,85,2)" rx="2" ry="2" />
<text  x="557.62" y="399.5" >__x64_sys_execve</text>
</g>
<g >
<title>ksys_write (3 samples, 23.08%)</title><rect x="191.5" y="357" width="272.3" height="15.0" fill="rgb(219,138,7)" rx="2" ry="2" />
<text  x="194.54" y="367.5" >ksys_write</text>
</g>
<g >
<title>x86_pmu_enable (7 samples, 53.85%)</title><rect x="554.6" y="245" width="635.4" height="15.0" fill="rgb(241,150,5)" rx="2" ry="2" />
<text  x="557.62" y="255.5" >x86_pmu_enable</text>
</g>
<g >
<title>x86_pmu_stop (2 samples, 15.38%)</title><rect x="191.5" y="101" width="181.6" height="15.0" fill="rgb(247,162,33)" rx="2" ry="2" />
<text  x="194.54" y="111.5" >x86_pmu_stop</text>
</g>
<g >
<title>perf_pmu_enable.part.0 (7 samples, 53.85%)</title><rect x="554.6" y="261" width="635.4" height="15.0" fill="rgb(213,42,19)" rx="2" ry="2" />
<text  x="557.62" y="271.5" >perf_pmu_enable.part.0</text>
</g>
<g >
<title>insert_work (1 samples, 7.69%)</title><rect x="373.1" y="197" width="90.7" height="15.0" fill="rgb(235,122,35)" rx="2" ry="2" />
<text  x="376.08" y="207.5" >insert_work</text>
</g>
<g >
<title>n_tty_write (3 samples, 23.08%)</title><rect x="191.5" y="277" width="272.3" height="15.0" fill="rgb(238,121,0)" rx="2" ry="2" />
<text  x="194.54" y="287.5" >n_tty_write</text>
</g>
<g >
<title>__GI___libc_write (3 samples, 23.08%)</title><rect x="191.5" y="421" width="272.3" height="15.0" fill="rgb(250,48,3)" rx="2" ry="2" />
<text  x="194.54" y="431.5" >__GI___libc_write</text>
</g>
<g >
<title>vfs_write (3 samples, 23.08%)</title><rect x="191.5" y="341" width="272.3" height="15.0" fill="rgb(247,117,27)" rx="2" ry="2" />
<text  x="194.54" y="351.5" >vfs_write</text>
</g>
<g >
<title>load_elf_binary (7 samples, 53.85%)</title><rect x="554.6" y="325" width="635.4" height="15.0" fill="rgb(232,23,20)" rx="2" ry="2" />
<text  x="557.62" y="335.5" >load_elf_binary</text>
</g>
<g >
<title>native_write_msr (1 samples, 7.69%)</title><rect x="373.1" y="85" width="90.7" height="15.0" fill="rgb(212,20,2)" rx="2" ry="2" />
<text  x="376.08" y="95.5" >native_wri..</text>
</g>
<g >
<title>[unknown] (3 samples, 23.08%)</title><rect x="191.5" y="437" width="272.3" height="15.0" fill="rgb(223,119,4)" rx="2" ry="2" />
<text  x="194.54" y="447.5" >[unknown]</text>
</g>
<g >
<title>begin_new_exec (7 samples, 53.85%)</title><rect x="554.6" y="309" width="635.4" height="15.0" fill="rgb(209,206,28)" rx="2" ry="2" />
<text  x="557.62" y="319.5" >begin_new_exec</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 23.08%)</title><rect x="191.5" y="405" width="272.3" height="15.0" fill="rgb(227,85,21)" rx="2" ry="2" />
<text  x="194.54" y="415.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>new_sync_write (3 samples, 23.08%)</title><rect x="191.5" y="325" width="272.3" height="15.0" fill="rgb(233,24,52)" rx="2" ry="2" />
<text  x="194.54" y="335.5" >new_sync_write</text>
</g>
<g >
<title>asm_exc_page_fault (2 samples, 15.38%)</title><rect x="10.0" y="421" width="181.5" height="15.0" fill="rgb(224,66,21)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >asm_exc_page_fault</text>
</g>
<g >
<title>send_call_function_single_ipi (1 samples, 7.69%)</title><rect x="373.1" y="117" width="90.7" height="15.0" fill="rgb(244,184,50)" rx="2" ry="2" />
<text  x="376.08" y="127.5" >send_call_..</text>
</g>
<g >
<title>perf_event_exec (7 samples, 53.85%)</title><rect x="554.6" y="293" width="635.4" height="15.0" fill="rgb(223,104,9)" rx="2" ry="2" />
<text  x="557.62" y="303.5" >perf_event_exec</text>
</g>
<g >
<title>x86_pmu_del (2 samples, 15.38%)</title><rect x="191.5" y="117" width="181.6" height="15.0" fill="rgb(240,58,50)" rx="2" ry="2" />
<text  x="194.54" y="127.5" >x86_pmu_del</text>
</g>
<g >
<title>try_to_wake_up (1 samples, 7.69%)</title><rect x="373.1" y="165" width="90.7" height="15.0" fill="rgb(208,24,25)" rx="2" ry="2" />
<text  x="376.08" y="175.5" >try_to_wak..</text>
</g>
<g >
<title>tty_write (3 samples, 23.08%)</title><rect x="191.5" y="309" width="272.3" height="15.0" fill="rgb(210,181,9)" rx="2" ry="2" />
<text  x="194.54" y="319.5" >tty_write</text>
</g>
<g >
<title>[unknown] (7 samples, 53.85%)</title><rect x="554.6" y="437" width="635.4" height="15.0" fill="rgb(247,111,40)" rx="2" ry="2" />
<text  x="557.62" y="447.5" >[unknown]</text>
</g>
<g >
<title>__sched_text_start (2 samples, 15.38%)</title><rect x="191.5" y="213" width="181.6" height="15.0" fill="rgb(230,164,47)" rx="2" ry="2" />
<text  x="194.54" y="223.5" >__sched_text_start</text>
</g>
<g >
<title>queue_work_on (1 samples, 7.69%)</title><rect x="373.1" y="229" width="90.7" height="15.0" fill="rgb(244,130,39)" rx="2" ry="2" />
<text  x="376.08" y="239.5" >queue_work..</text>
</g>
<g >
<title>group_sched_out.part.0 (2 samples, 15.38%)</title><rect x="191.5" y="149" width="181.6" height="15.0" fill="rgb(242,149,11)" rx="2" ry="2" />
<text  x="194.54" y="159.5" >group_sched_out.part.0</text>
</g>
<g >
<title>mutex_lock (2 samples, 15.38%)</title><rect x="191.5" y="261" width="181.6" height="15.0" fill="rgb(206,67,27)" rx="2" ry="2" />
<text  x="194.54" y="271.5" >mutex_lock</text>
</g>
<g >
<title>amd_pmu_wait_on_overflow (2 samples, 15.38%)</title><rect x="191.5" y="69" width="181.6" height="15.0" fill="rgb(219,207,48)" rx="2" ry="2" />
<text  x="194.54" y="79.5" >amd_pmu_wait_on_overflow</text>
</g>
<g >
<title>do_user_addr_fault (2 samples, 15.38%)</title><rect x="10.0" y="389" width="181.5" height="15.0" fill="rgb(219,9,41)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >do_user_addr_fault</text>
</g>
<g >
<title>exc_page_fault (2 samples, 15.38%)</title><rect x="10.0" y="405" width="181.5" height="15.0" fill="rgb(244,118,9)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >exc_page_fault</text>
</g>
<g >
<title>__libc_start_main (1 samples, 7.69%)</title><rect x="463.8" y="437" width="90.8" height="15.0" fill="rgb(226,188,5)" rx="2" ry="2" />
<text  x="466.85" y="447.5" >__libc_sta..</text>
</g>
<g >
<title>native_send_call_func_single_ipi (1 samples, 7.69%)</title><rect x="373.1" y="101" width="90.7" height="15.0" fill="rgb(246,62,16)" rx="2" ry="2" />
<text  x="376.08" y="111.5" >native_sen..</text>
</g>
<g >
<title>ex2up2 (6 samples, 46.15%)</title><rect x="10.0" y="453" width="544.6" height="15.0" fill="rgb(240,17,14)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >ex2up2</text>
</g>
<g >
<title>main (1 samples, 7.69%)</title><rect x="463.8" y="421" width="90.8" height="15.0" fill="rgb(219,69,29)" rx="2" ry="2" />
<text  x="466.85" y="431.5" >main</text>
</g>
<g >
<title>next_uptodate_page (2 samples, 15.38%)</title><rect x="10.0" y="309" width="181.5" height="15.0" fill="rgb(233,5,50)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >next_uptodate_page</text>
</g>
<g >
<title>preempt_schedule_common (2 samples, 15.38%)</title><rect x="191.5" y="229" width="181.6" height="15.0" fill="rgb(231,117,50)" rx="2" ry="2" />
<text  x="194.54" y="239.5" >preempt_schedule_common</text>
</g>
<g >
<title>[libgcc_s.so.1] (2 samples, 15.38%)</title><rect x="10.0" y="437" width="181.5" height="15.0" fill="rgb(205,134,41)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >[libgcc_s.so.1]</text>
</g>
<g >
<title>do_execveat_common.isra.0 (7 samples, 53.85%)</title><rect x="554.6" y="373" width="635.4" height="15.0" fill="rgb(240,175,35)" rx="2" ry="2" />
<text  x="557.62" y="383.5" >do_execveat_common.isra.0</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (7 samples, 53.85%)</title><rect x="554.6" y="421" width="635.4" height="15.0" fill="rgb(213,47,13)" rx="2" ry="2" />
<text  x="557.62" y="431.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>do_fault (2 samples, 15.38%)</title><rect x="10.0" y="341" width="181.5" height="15.0" fill="rgb(213,183,0)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >do_fault</text>
</g>
<g >
<title>ttwu_queue_wakelist (1 samples, 7.69%)</title><rect x="373.1" y="149" width="90.7" height="15.0" fill="rgb(236,27,22)" rx="2" ry="2" />
<text  x="376.08" y="159.5" >ttwu_queue..</text>
</g>
<g >
<title>__smp_call_single_queue (1 samples, 7.69%)</title><rect x="373.1" y="133" width="90.7" height="15.0" fill="rgb(213,10,41)" rx="2" ry="2" />
<text  x="376.08" y="143.5" >__smp_call..</text>
</g>
<g >
<title>handle_mm_fault (2 samples, 15.38%)</title><rect x="10.0" y="373" width="181.5" height="15.0" fill="rgb(247,90,3)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >handle_mm_fault</text>
</g>
<g >
<title>do_syscall_64 (7 samples, 53.85%)</title><rect x="554.6" y="405" width="635.4" height="15.0" fill="rgb(239,122,10)" rx="2" ry="2" />
<text  x="557.62" y="415.5" >do_syscall_64</text>
</g>
<g >
<title>filemap_map_pages (2 samples, 15.38%)</title><rect x="10.0" y="325" width="181.5" height="15.0" fill="rgb(235,196,32)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >filemap_map_pages</text>
</g>
<g >
<title>__x64_sys_write (3 samples, 23.08%)</title><rect x="191.5" y="373" width="272.3" height="15.0" fill="rgb(213,177,34)" rx="2" ry="2" />
<text  x="194.54" y="383.5" >__x64_sys_write</text>
</g>
<g >
<title>pty_write (1 samples, 7.69%)</title><rect x="373.1" y="261" width="90.7" height="15.0" fill="rgb(250,139,26)" rx="2" ry="2" />
<text  x="376.08" y="271.5" >pty_write</text>
</g>
<g >
<title>__cond_resched (2 samples, 15.38%)</title><rect x="191.5" y="245" width="181.6" height="15.0" fill="rgb(237,199,44)" rx="2" ry="2" />
<text  x="194.54" y="255.5" >__cond_resched</text>
</g>
<g >
<title>event_sched_out.isra.0 (2 samples, 15.38%)</title><rect x="191.5" y="133" width="181.6" height="15.0" fill="rgb(223,83,48)" rx="2" ry="2" />
<text  x="194.54" y="143.5" >event_sched_out.isra.0</text>
</g>
<g >
<title>__handle_mm_fault (2 samples, 15.38%)</title><rect x="10.0" y="357" width="181.5" height="15.0" fill="rgb(247,30,1)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >__handle_mm_fault</text>
</g>
<g >
<title>bprm_execve (7 samples, 53.85%)</title><rect x="554.6" y="357" width="635.4" height="15.0" fill="rgb(230,205,26)" rx="2" ry="2" />
<text  x="557.62" y="367.5" >bprm_execve</text>
</g>
<g >
<title>ctx_sched_out (2 samples, 15.38%)</title><rect x="191.5" y="165" width="181.6" height="15.0" fill="rgb(238,229,24)" rx="2" ry="2" />
<text  x="194.54" y="175.5" >ctx_sched_out</text>
</g>
<g >
<title>wake_up_process (1 samples, 7.69%)</title><rect x="373.1" y="181" width="90.7" height="15.0" fill="rgb(249,45,17)" rx="2" ry="2" />
<text  x="376.08" y="191.5" >wake_up_pr..</text>
</g>
<g >
<title>tty_flip_buffer_push (1 samples, 7.69%)</title><rect x="373.1" y="245" width="90.7" height="15.0" fill="rgb(254,100,27)" rx="2" ry="2" />
<text  x="376.08" y="255.5" >tty_flip_b..</text>
</g>
</g>
</svg>
